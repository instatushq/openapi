openapi: 3.0.3
info:
  title: Instatus API
  version: 2.0.0
  description: >
    API for managing status pages, components, incidents, and more on Instatus.


    - All endpoints are generally follow the REST architecture.

    - All requests must be encoded as JSON with the "Content-Type:
    application/json header".

    - Responses from the Instatus API, including errors, are encoded as JSON as
    well.

    - Requests to Instatus API must provide an API token through the
    Authorization header.

    - You can get your API key from User settings developer settings:
    https://dashboard.instatus.com/developer
servers:
  - url: https://api.instatus.com
security:
  - bearerAuth: []
tags:
  - name: Status Pages
  - name: Components
  - name: Incidents
  - name: Incident Updates
  - name: Maintenances
  - name: Maintenance Updates
  - name: Templates
  - name: Teammates
  - name: Subscribers
  - name: Metrics
  - name: User Profile
  - name: Public Data
  - name: Audience Groups
  - name: Private Pages
  - name: Monitors
  - name: Routing Rules
  - name: Escalation Policies
  - name: On Call Schedules
paths:
  /v2/pages:
    get:
      summary: Get your status pages
      description: >
        Retrieve a list of your status pages or Get your status page secure link

        The default page number is 1.

        The default per_page number is 50 and the maximum is 100 items per page.


        If your account has member / owner access to a private status page with
        secure links enabled, 

        you're allowed to get the secure link to your page. (you will get a
        secureLink property in the response)
      tags:
        - Status Pages
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatusPage"
  /v1/pages:
    post:
      summary: Create a status page
      description: Create a new status page
      tags:
        - Status Pages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStatusPageRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusPageResponse"
  /v2/{page_id}:
    put:
      summary: Update a status page
      description: Update an existing status page
      tags:
        - Status Pages
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusPageRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusPageResponse"
    delete:
      summary: Delete a status page
      description: Delete an existing status page
      tags:
        - Status Pages
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page to delete
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/components:
    get:
      summary: Get all your status page components
      description: |
        Retrieve a list of components for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Components
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Component"
    post:
      summary: Create a component
      description: Create a new component for a specific status page
      tags:
        - Components
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComponentRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
  /v1/{page_id}/components/{component_id}:
    get:
      summary: Get a component
      description: Retrieve a specific component
      tags:
        - Components
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: component_id
          required: true
          schema:
            type: string
          description: The ID of the component
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
    put:
      summary: Update a component
      description: Update an existing component
      tags:
        - Components
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: component_id
          required: true
          schema:
            type: string
          description: The ID of the component
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateComponentRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Component"
    delete:
      summary: Delete a component
      description: Delete an existing component, (Will not delete child components)
      tags:
        - Components
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: component_id
          required: true
          schema:
            type: string
          description: The ID of the component
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/incidents:
    get:
      summary: Get all page incidents
      description: |
        Retrieve a list of incidents for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
          description: >-
            Comma-separated list of statuses to **include**

            Knowing Statuses are: `INVESTIGATING`, `IDENTIFIED`, `MONITORING`,
            `RESOLVED`
        - in: query
          name: "!status"
          schema:
            type: string
          description: >-
            Comma-separated list of statuses to **exclude**

            Knowing Statuses are: `INVESTIGATING`, `IDENTIFIED`, `MONITORING`,
            `RESOLVED`
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Incident"
    post:
      summary: Add an incident
      description: Create a new incident for a specific status page
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncidentRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /v1/{page_id}/incidents/{incident_id}:
    get:
      summary: Get an incident
      description: Retrieve a specific incident
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
    put:
      summary: Update incident
      description: Update an existing incident
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIncidentRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
    delete:
      summary: Delete incident
      description: Delete an existing incident
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/incidents/{template}:
    post:
      summary: Add an incident with a template
      description: Create a new incident using a template
      tags:
        - Incidents
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: template
          required: true
          schema:
            type: string
          description: The ID or name of the template to use
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentWithTemplate"
  /v1/{page_id}/incidents/{incident_id}/incident-updates/{incident_update_id}:
    get:
      summary: Get an incident update
      description: Retrieve a specific incident update
      tags:
        - Incident Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
        - in: path
          name: incident_update_id
          required: true
          schema:
            type: string
          description: The ID of the incident update
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentUpdateDetailed"
    put:
      summary: Edit an incident update
      description: Update an existing incident update
      tags:
        - Incident Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
        - in: path
          name: incident_update_id
          required: true
          schema:
            type: string
          description: The ID of the incident update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIncidentUpdateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentUpdateDetailed"
    delete:
      summary: Delete an incident update
      description: Delete an existing incident update
      tags:
        - Incident Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
        - in: path
          name: incident_update_id
          required: true
          schema:
            type: string
          description: The ID of the incident update
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/incidents/{incident_id}/incident-updates:
    post:
      summary: Add an incident update
      description: Create a new incident update
      tags:
        - Incident Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIncidentUpdateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentUpdateDetailed"
  /v2/{page_id}/incidents/{incident_id}/incident-updates/{template}:
    post:
      summary: Resolve an incident with a template
      description: Resolve an incident using a template
      tags:
        - Incident Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: incident_id
          required: true
          schema:
            type: string
          description: The ID of the incident
        - in: path
          name: template
          required: true
          schema:
            type: string
          description: The ID or name of the template to use
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentUpdateWithTemplate"
  /v1/{page_id}/maintenances:
    get:
      summary: Get all page maintenances
      description: |
        Retrieve a list of maintenances for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Maintenances
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Maintenance"
    post:
      summary: Add a maintenance
      description: Create a new maintenance for a specific status page
      tags:
        - Maintenances
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMaintenanceRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
  /v1/{page_id}/maintenances/{maintenance_id}:
    get:
      summary: Get a maintenance
      description: Retrieve a specific maintenance
      tags:
        - Maintenances
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
    put:
      summary: Update maintenance
      description: Update an existing maintenance
      tags:
        - Maintenances
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMaintenanceRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
    delete:
      summary: Delete maintenance
      description: Delete an existing maintenance
      tags:
        - Maintenances
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/maintenances/{maintenance_id}/maintenance-updates/{maintenance_update_id}:
    get:
      summary: Get a maintenance update
      description: Retrieve a specific maintenance update
      tags:
        - Maintenance Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
        - in: path
          name: maintenance_update_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance update
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceUpdateDetailed"
    put:
      summary: Edit a maintenance update
      description: Update an existing maintenance update
      tags:
        - Maintenance Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
        - in: path
          name: maintenance_update_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMaintenanceUpdateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceUpdateDetailed"
    delete:
      summary: Delete a maintenance update
      description: Delete an existing maintenance update
      tags:
        - Maintenance Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
        - in: path
          name: maintenance_update_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance update
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
  /v1/{page_id}/maintenances/{maintenance_id}/maintenance-updates:
    post:
      summary: Add a maintenance update
      description: Create a new maintenance update
      tags:
        - Maintenance Updates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: maintenance_id
          required: true
          schema:
            type: string
          description: The ID of the maintenance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMaintenanceUpdateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceUpdateDetailed"
  /v1/{page_id}/templates:
    get:
      summary: Get all page templates
      description: |
        Retrieve a list of templates for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Templates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
    post:
      summary: Add a template
      description: Create a new template for a specific status page
      tags:
        - Templates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTemplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /v1/{page_id}/templates/{template_id}:
    get:
      summary: Get a template
      description: Retrieve a specific template
      tags:
        - Templates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: template_id
          required: true
          schema:
            type: string
          description: The ID of the template
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      summary: Update template
      description: Update an existing template
      tags:
        - Templates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: template_id
          required: true
          schema:
            type: string
          description: The ID of the template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTemplateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    delete:
      summary: Delete template
      description: Delete an existing template
      tags:
        - Templates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: template_id
          required: true
          schema:
            type: string
          description: The ID of the template
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedTemplate"
  /v1/{page_id}/team:
    get:
      summary: Get teammates
      description: |
        Retrieve a list of team members for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Teammates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Teammate"
    post:
      summary: Add a team member
      description: Add a new team member to a specific status page
      tags:
        - Teammates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTeammateRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeammateDetail"
  /v1/{page_id}/team/{member_id}:
    delete:
      summary: Delete a team member
      description: Remove a team member from a specific status page
      tags:
        - Teammates
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: member_id
          required: true
          schema:
            type: string
          description: The ID of the team member
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  memberId:
                    type: string
  /v1/{page_id}/subscribers:
    get:
      summary: Get subscribers
      description: |
        Retrieve a list of subscribers for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Subscribers
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Filter subscribers by email address or phone number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscriber"
    post:
      summary: Add a subscriber
      description: Add a new subscriber to a specific status page
      tags:
        - Subscribers
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddSubscriberRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriberDetail"
  /v1/{page_id}/subscribers/{subscriber_id}:
    delete:
      summary: Remove a subscriber
      description: Remove a subscriber from a specific status page
      tags:
        - Subscribers
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: subscriber_id
          required: true
          schema:
            type: string
          description: The ID of the subscriber
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RemovedSubscriber"
  /v2/{page_id}/subscribers:
    get:
      summary: Get subscribers
      description: |
        Retrieve a list of subscribers for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Subscribers
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Filter subscribers by email address or phone number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscriber"
  /v1/{page_id}/metrics:
    get:
      summary: Get all metrics
      description: |
        Retrieve a list of metrics for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Metric"
    post:
      summary: Add a metric
      description: Add a new metric to a specific status page
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMetricRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
  /v1/{page_id}/metrics/{metric_id}:
    get:
      summary: Get a metric
      description: Retrieve a specific metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
    put:
      summary: Update a metric
      description: Update an existing metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMetricRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metric"
    delete:
      summary: Delete a metric
      description: Delete an existing metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedMetric"
    post:
      summary: Add a datapoint to a metric
      description: Add a single datapoint to a specific metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddDatapointRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datapoint"
  /v1/{page_id}/metrics/{metric_id}/data:
    post:
      summary: Add multiple datapoints to a metric
      description: Add multiple datapoints to a specific metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddMultipleDatapointsRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Datapoint"
    delete:
      summary: Delete datapoints from a metric
      description: Delete all datapoints from a specific metric
      tags:
        - Metrics
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: metric_id
          required: true
          schema:
            type: string
          description: The ID of the metric
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedDatapoints"
  /v1/user:
    get:
      summary: Get your user profile
      description: Retrieve the profile information of the authenticated user
      tags:
        - User Profile
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
  /summary.json:
    get:
      summary: Get public status summary
      description: |
        Retrieve the current status summary of the status page 
        - The base url is your status page url
        - An example is https://instat.us/summary.json
      tags:
        - Public Data
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicStatusSummary"
  /v1/{page_id}/audience-groups:
    get:
      summary: Get all your status page audience groups
      description: |
        Retrieve a list of audience groups for a specific status page.
        The default page number is 1.
        The default per_page number is 50 and the maximum is 100 items per page.
      tags:
        - Audience Groups
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: per_page
          schema:
            type: integer
            default: 50
            maximum: 100
          description: Number of items per page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AudienceGroup"
    post:
      summary: Create an audience group
      description: Create a new audience group for a specific status page
      tags:
        - Audience Groups
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAudienceGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedAudienceGroup"
  /v1/{page_id}/audience-groups/{audience_group_id}:
    get:
      summary: Get an audience group
      description: Retrieve a specific audience group
      tags:
        - Audience Groups
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: audience_group_id
          required: true
          schema:
            type: string
          description: The ID of the audience group
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AudienceGroup"
    put:
      summary: Update an audience group
      description: Update an existing audience group
      tags:
        - Audience Groups
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: audience_group_id
          required: true
          schema:
            type: string
          description: The ID of the audience group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAudienceGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatedAudienceGroup"
    delete:
      summary: Delete an audience group
      description: Delete an existing audience group
      tags:
        - Audience Groups
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
        - in: path
          name: audience_group_id
          required: true
          schema:
            type: string
          description: The ID of the audience group
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeletedAudienceGroup"
  /v1/{page_id}/regenerate-secure-link:
    post:
      summary: Regenerate your secure link
      description: Regenerate the secure link for a specific status page
      tags:
        - Private Pages
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
          description: The ID of the status page
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurePageLink"
  /monitors/check_inserted_logs:
    get:
      summary: Check Inserted Logs
      tags:
        - Monitors
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /{page_id}/monitors:
    get:
      summary: Get Monitors
      description: Retrieve a list of monitors for a specific status page
      tags:
        - Monitors
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
        - in: query
          name: limit
          description: The number of monitors per page
          schema:
            type: integer
            default: 100
        - in: query
          name: search
          description: Search term for filtering results.
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum:
              - UP
              - DOWN
              - UNKNOWN
              - DEGRADED
            description: |-
              `UP` - Monitor is running normally
              `DOWN` - Monitor has failed
              `UNKNOWN` - Monitor state can't be determined
              `DEGRADED` - Monitor is experiencing issues
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  monitors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Monitor"
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  limit:
                    type: integer
  /monitors:
    post:
      summary: Create a Monitor
      tags:
        - Monitors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMonitorRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorResponse"
  /monitors/{id}/group:
    put:
      summary: Update a Monitor's Group
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parentId:
                  type: string
                  description: >-
                    The id of the parent monitor group to add the monitor to,
                    leave as null to unparent the monitor completely.
                  nullable: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /monitors/{id}:
    put:
      summary: Update a Monitor
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMonitorRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorResponse"
    delete:
      summary: Delete a Monitor
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /monitor-alerts:
    post:
      summary: Create Monitor Alert
      tags:
        - Monitors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMonitorAlertRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorAlertResponse"
  /monitor-alerts/{id}:
    put:
      summary: Update Monitor Alert
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/schemas/MonitorAlertType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMonitorAlertRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorAlertResponse"
    delete:
      summary: Delete Monitor Alert
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /{page_id}/monitor-alerts:
    get:
      summary: Get Monitor Alerts
      tags:
        - Monitors
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
        - in: query
          name: page
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  monitorAlerts:
                    type: array
                    items:
                      $ref: "#/components/schemas/MonitorAlert"
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  limit:
                    type: integer
  /monitors-groups:
    post:
      summary: Create Monitor Group
      tags:
        - Monitors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMonitorGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGroupResponse"
  /monitors-groups/{id}:
    put:
      summary: Update Monitor Group
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMonitorGroupRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorGroupResponse"
    delete:
      summary: Delete Monitor Group
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /monitors-groups/{id}/monitors:
    post:
      summary: Add Monitors to Group
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                monitors:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /monitors-groups/{id}/run:
    get:
      summary: Run Monitor Group Check
      tags:
        - Monitors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: location
          schema:
            type: string
            $ref: "#/components/schemas/MonitorLocation"
        - in: query
          name: retry
          schema:
            type: boolean
            default: false
        - in: query
          name: monitorLogId
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                  monitorLogId:
                    type: string
  /{page_id}/routing-rules:
    get:
      summary: Get Routing Rules
      tags:
        - Routing Rules
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutingRulesResponse"
  /routing-rules:
    post:
      summary: Create Routing Rule
      description: >-
        Keep in mind in actions `targetId` can be a workspace member email or a
        team id depending on the type of the action.
      tags:
        - Routing Rules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoutingRuleRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutingRuleResponse"
  /routing-rules/{id}:
    put:
      summary: Update Routing Rule
      tags:
        - Routing Rules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoutingRuleRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutingRuleResponse"
    delete:
      summary: Delete Routing Rule
      tags:
        - Routing Rules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRoutingRuleResponse"
  /{page_id}/escalation-policies:
    get:
      summary: Get Escalation Policies
      tags:
        - Escalation Policies
      parameters:
        - in: path
          name: page_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscalationPoliciesResponse"
  /escalation-policies:
    post:
      summary: Create Escalation Policy
      tags:
        - Escalation Policies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEscalationPolicyRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscalationPolicyResponse"
  /escalation-policies/{id}:
    put:
      summary: Update Escalation Policy
      tags:
        - Escalation Policies
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEscalationPolicyRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EscalationPolicyResponse"
    delete:
      summary: Delete Escalation Policy
      tags:
        - Escalation Policies
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteEscalationPolicyResponse"
  /on-call-schedules:
    post:
      summary: Create On-call Schedule
      tags:
        - On Call Schedules
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOnCallScheduleRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnCallScheduleResponse"
  /on-call-schedules/{id}:
    put:
      summary: Update On-call Schedule
      tags:
        - On Call Schedules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOnCallScheduleRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnCallScheduleResponse"
    delete:
      summary: Delete On-call Schedule
      tags:
        - On Call Schedules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    PageStatus:
      type: string
      enum:
        - UP
        - HASISSUES
        - ALLUNDERMAINTENANCE
        - ALLDEGRADEDPERFORMANCE
        - ALLPARTIALOUTAGE
        - ALLMINOROUTAGE
        - ALLMAJOROUTAGE
        - SOMEUNDERMAINTENANCE
        - SOMEDEGRADEDPERFORMANCE
        - SOMEPARTIALOUTAGE
        - SOMEMINOROUTAGE
        - SOMEMAJOROUTAGE
        - ONEUNDERMAINTENANCE
        - ONEDEGRADEDPERFORMANCE
        - ONEPARTIALOUTAGE
        - ONEMINOROUTAGE
        - ONEMAJOROUTAGE
    ComponentStatus:
      type: string
      enum:
        - OPERATIONAL
        - UNDERMAINTENANCE
        - DEGRADEDPERFORMANCE
        - PARTIALOUTAGE
        - MAJOROUTAGE
    IncidentStatus:
      type: string
      enum:
        - INVESTIGATING
        - IDENTIFIED
        - MONITORING
        - RESOLVED
    IncidentImpact:
      type: string
      enum:
        - OPERATIONAL
        - DEGRADEDPERFORMANCE
        - PARTIALOUTAGE
        - MAJOROUTAGE
    MaintenanceStatus:
      type: string
      enum:
        - NOTSTARTEDYET
        - INPROGRESS
        - COMPLETED
    TemplateStatus:
      type: string
      description: |-
        The status of the notice when it's created using the template.
        **Incident Options:**

        - `INVESTIGATING`
        - `IDENTIFIED`
        - `MONITORING`
        - `RESOLVED`

        **Maintenance options:**
         - `NOTSTARTEDYET`
        - `INPROGRESS`
        - `COMPLETED`
      enum:
        - INVESTIGATING
        - IDENTIFIED
        - MONITORING
        - RESOLVED
        - NOTSTARTEDYET
        - INPROGRESS
        - COMPLETED
    TemplateOrigin:
      type: string
      description: |-
        The origin of the template.
        - `MANUAL`: The template was created manually by the user.
        - `INTEGRATION`: The template was created by an integration.
        - `MONITOR`: The template was created by a monitor.
      enum:
        - MANUAL
        - INTEGRATION
        - MONITOR
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
    Translations:
      type: object
      description: >-
        Object containing translations where each key is a property name and the
        value is an object with language codes as keys and translations as
        values. The language code as the key (e.g., 'en', 'fr') and the
        translation as the value.
      additionalProperties:
        type: object
        additionalProperties:
          type: string
      example:
        name:
          en: This will be displayed for English users
          fr: Ceci sera affiché pour les utilisateurs francophones
        description:
          en: Example description in English
          fr: Exemple de description en français
    StatusPage:
      type: object
      properties:
        id:
          type: string
        subdomain:
          type: string
        name:
          type: string
        logoUrl:
          type: string
          nullable: true
        faviconUrl:
          type: string
          nullable: true
        websiteUrl:
          type: string
          nullable: true
        customDomain:
          type: string
          nullable: true
        publicEmail:
          type: string
          nullable: true
        twitter:
          type: string
          nullable: true
        status:
          $ref: "#/components/schemas/PageStatus"
        subscribeBySms:
          type: boolean
          nullable: true
        language:
          type: string
          description: >-
            The language of the status page in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
        useLargeHeader:
          type: boolean
        brandColor:
          description: The brand color of the status page, in hex format.
          type: string
        okColor:
          description: The color for operational, in hex format.
          type: string
        disruptedColor:
          type: string
          nullable: true
          description: The color for partial outage, in hex format.
        degradedColor:
          type: string
          nullable: true
          description: The color for degraded performance, in hex format.
        downColor:
          description: The color for major outage, in hex format.
          type: string
          nullable: true
        noticeColor:
          type: string
          nullable: true
          description: The color for maintenances, in hex format.
        unknownColor:
          type: string
          nullable: true
          description: The color for unknown status, in hex format.
        googleAnalytics:
          type: string
          nullable: true
        smsService:
          $ref: "#/components/schemas/SmsService"
          nullable: true
        htmlInMeta:
          type: string
          nullable: true
        htmlAboveHeader:
          type: string
          nullable: true
        htmlBelowHeader:
          type: string
          nullable: true
        htmlAboveFooter:
          type: string
          nullable: true
        htmlBelowFooter:
          type: string
          nullable: true
        htmlBelowSummary:
          type: string
          nullable: true
        launchDate:
          type: string
          nullable: true
        cssGlobal:
          type: string
          nullable: true
        onboarded:
          type: boolean
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        secureLink:
          type: string
          format: uri
          nullable: true
    SmsService:
      type: string
      enum:
        - twilio
        - vonage
        - esendex
        - messagebird
        - sns
    CreateStatusPageRequest:
      type: object
      required:
        - email
        - name
        - subdomain
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        subdomain:
          description: >-
            The subdomain of the status page, make sure it's unique and follows
            the slug format.
          type: string
        components:
          type: array
          description: The names of the components to add to the status page.
          items:
            type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        websiteUrl:
          type: string
        language:
          type: string
          description: >-
            The language of the status page in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
        useLargeHeader:
          type: boolean
        brandColor:
          description: >-
            The brand color of the status page, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        okColor:
          description: >-
            The color for operational, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        disruptedColor:
          description: >-
            The color for partial outage, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        degradedColor:
          description: >-
            The color for degraded performance, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        downColor:
          description: >-
            The color for major outage, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        noticeColor:
          description: >-
            The color for maintenances, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        unknownColor:
          type: string
        googleAnalytics:
          type: string
        subscribeBySms:
          type: boolean
        smsService:
          $ref: "#/components/schemas/SmsService"
          description: >-
            The SMS service to use for notifications, You will need to fill the
            parameters related to the selected service.
        twilioSid:
          type: string
        twilioToken:
          type: string
        twilioSender:
          type: string
        esendexUsername:
          type: string
        esendexPassword:
          type: string
        esendexAccountRef:
          type: string
        nexmoKey:
          type: string
          nullable: true
        nexmoSecret:
          type: string
          nullable: true
        nexmoSender:
          type: string
          nullable: true
        htmlInMeta:
          type: string
          nullable: true
        htmlAboveHeader:
          type: string
          nullable: true
        htmlBelowHeader:
          type: string
          nullable: true
        htmlAboveFooter:
          type: string
          nullable: true
        htmlBelowFooter:
          type: string
          nullable: true
        htmlBelowSummary:
          type: string
          nullable: true
        cssGlobal:
          type: string
          description: Global CSS to apply to the status page.
          nullable: true
        launchDate:
          type: string
          nullable: true
        dateFormat:
          description: >-
            Formats to display dates on the page, please refer to [date-fns
            formatting](https://date-fns.org/docs/format)
          type: string
        dateFormatShort:
          description: >-
            Formats to display the shortened date on the page, please refer to
            [date-fns formatting](https://date-fns.org/docs/format)
          type: string
        timeFormat:
          description: >-
            Formats to display time on the page, please refer to [date-fns
            formatting](https://date-fns.org/docs/format)
          type: string
    UpdateStatusPageRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/PageStatus"
        subdomain:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        websiteUrl:
          type: string
        language:
          type: string
          description: >-
            The language of the status page in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
        publicEmail:
          type: string
        useLargeHeader:
          type: boolean
        brandColor:
          description: >-
            The brand color of the status page, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        okColor:
          description: >-
            The color for operational, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        disruptedColor:
          description: >-
            The color for partial outage, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        degradedColor:
          description: >-
            The color for degraded performance, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        downColor:
          description: >-
            The color for major outage, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        noticeColor:
          description: >-
            The color for maintenances, This only accepts hex colors or
            rgb(r,g,b).
          type: string
        unknownColor:
          type: string
        googleAnalytics:
          type: string
        subscribeBySms:
          type: boolean
        smsService:
          $ref: "#/components/schemas/SmsService"
          description: >-
            The SMS service to use for notifications, You will need to fill the
            parameters related to the selected service.
        twilioSid:
          type: string
        twilioToken:
          type: string
        twilioSender:
          type: string
        esendexUsername:
          type: string
        esendexPassword:
          type: string
        esendexAccountRef:
          type: string
        nexmoKey:
          type: string
          nullable: true
        nexmoSecret:
          type: string
          nullable: true
        nexmoSender:
          type: string
          nullable: true
        htmlInMeta:
          type: string
          nullable: true
        htmlAboveHeader:
          type: string
          nullable: true
        htmlBelowHeader:
          type: string
          nullable: true
        htmlAboveFooter:
          type: string
          nullable: true
        htmlBelowFooter:
          type: string
          nullable: true
        htmlBelowSummary:
          type: string
          nullable: true
        cssGlobal:
          type: string
          nullable: true
        launchDate:
          type: string
          nullable: true
        dateFormat:
          type: string
        dateFormatShort:
          type: string
        timeFormat:
          type: string
        private:
          type: boolean
        useAllowList:
          type: boolean
        translations:
          $ref: "#/components/schemas/Translations"
    StatusPageResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        subdomain:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/PageStatus"
        logoUrl:
          type: string
          nullable: true
        faviconUrl:
          type: string
          nullable: true
        websiteUrl:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        language:
          type: string
          nullable: true
          description: >-
            The language of the status page in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
        googleAnalytics:
          type: string
          nullable: true
        publicEmail:
          type: string
          nullable: true
        customDomain:
          type: string
          nullable: true
        useLargeHeader:
          type: boolean
        disableDarkMode:
          type: boolean
          nullable: true
        twitter:
          type: string
          nullable: true
        subscribeBySms:
          type: boolean
          nullable: true
        brandColor:
          description: The brand color of the status page, in hex format.
          type: string
          nullable: true
        okColor:
          description: The color for operational, in hex format.
          type: string
          nullable: true
        disruptedColor:
          description: The color for partial outage, in hex format.
          type: string
          nullable: true
        downColor:
          description: The color for major outage, in hex format.
          type: string
          nullable: true
        degradedColor:
          description: The color for degraded performance, in hex format.
          type: string
          nullable: true
        noticeColor:
          description: The color for maintenances, in hex format.
          type: string
          nullable: true
        htmlInMeta:
          type: string
          nullable: true
        htmlAboveHeader:
          type: string
          nullable: true
        htmlBelowHeader:
          type: string
          nullable: true
        htmlAboveFooter:
          type: string
          nullable: true
        htmlBelowFooter:
          type: string
          nullable: true
        htmlBelowSummary:
          type: string
          nullable: true
        cssGlobal:
          type: string
          nullable: true
        onboarded:
          type: boolean
          nullable: true
        launchDate:
          type: string
          nullable: true
        dateFormat:
          type: string
        dateFormatShort:
          type: string
        timeFormat:
          type: string
        private:
          type: boolean
        useAllowList:
          type: boolean
        allowList:
          type: array
          items:
            type: string
        components:
          type: array
          items:
            $ref: "#/components/schemas/Component"
        translations:
          $ref: "#/components/schemas/Translations"
    Component:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uniqueEmail:
          type: string
          description: >-
            The unique email address for the component, this is used to send
            notifications to the component. send an email titled `DOWN` to set
            it to major outage and `UP` for operational
        description:
          type: string
        status:
          $ref: "#/components/schemas/ComponentStatus"
        order:
          type: integer
          nullable: true
          description: The order of the component on the status page.
        group:
          type: object
          $ref: "#/components/schemas/Component"
          description: This will be null if the component has no parent.
          nullable: true
          properties:
            isParent:
              type: boolean
              value: true
              description: Will always be true
        nameTranslationId:
          type: string
          nullable: true
        descriptionTranslationId:
          type: string
          nullable: true
        showUptime:
          type: boolean
          description: Whether to show the percentage and uptime bar for the component.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        archivedAt:
          type: string
          format: date-time
          nullable: true
        siteId:
          type: string
        groupId:
          type: string
          nullable: true
          description: The id of the parent component for this component.
        nameHtml:
          type: string
          description: The HTML version of the component name.
          nullable: true
        nameHtmlTranslationId:
          type: string
          nullable: true
        descriptionHtml:
          type: string
          description: The HTML version of the component description.
          nullable: true
        descriptionHtmlTranslationId:
          type: string
          nullable: true
        isThirdParty:
          type: boolean
        thirdPartyStatus:
          type: string
          nullable: true
        thirdPartyComponentId:
          type: string
          nullable: true
        thirdPartyComponentServiceId:
          type: string
          nullable: true
        importedFromStatuspage:
          type: boolean
        startDate:
          type: string
          format: date-time
          nullable: true
        translations:
          $ref: "#/components/schemas/Translations"
    CreateComponentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/ComponentStatus"
        order:
          type: integer
          description: The order of the component on the status page.
        showUptime:
          type: boolean
          description: Whether to show the percentage and uptime bar for the component.
        grouped:
          type: boolean
          description: >-
            Whether the component is a parent component or not, If set to true,
            make sure to set the group parent id in the `group` field.
        group:
          type: string
          nullable: true
          description: The id of the component to group under.
        archived:
          type: boolean
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateComponentRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/ComponentStatus"
        order:
          type: integer
          description: The order of the component on the status page.
        showUptime:
          type: boolean
          description: Whether to show the percentage and uptime bar for the component.
        grouped:
          type: boolean
        archived:
          type: boolean
        translations:
          $ref: "#/components/schemas/Translations"
    Incident:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/IncidentStatus"
        started:
          type: string
          format: date-time
          description: The date and time the incident started.
        duration:
          type: integer
          description: >-
            The duration of the incident in minutes from beginning to
            resolution.

            null if the incident is not yet resolved.
          nullable: true
        resolved:
          type: string
          format: date-time
          nullable: true
          description: |-
            The date and time the incident was resolved.
            null if the incident is not yet resolved.
        updates:
          type: array
          items:
            $ref: "#/components/schemas/IncidentUpdate"
        components:
          type: array
          items:
            $ref: "#/components/schemas/IncidentComponent"
        translations:
          $ref: "#/components/schemas/Translations"
    IncidentUpdate:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        messageHtml:
          type: string
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        started:
          type: string
          format: date-time
          description: The date and time the incident update happened.
        ended:
          type: string
          format: date-time
          nullable: true
          description: |-
            The date and time the incident update resolved.
            Will have a value if the incident update `status` is `RESOLVED`.
        duration:
          type: integer
          description: >-
            The duration of the incident update in minutes from beginning to
            resolution.
          nullable: true
        createdAt:
          type: string
          format: date-time
    IncidentComponent:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/IncidentStatus"
        showUptime:
          type: boolean
          description: Whether to show the percentage and uptime bar for the component.
        site:
          $ref: "#/components/schemas/IncidentSite"
    IncidentSite:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subdomain:
          type: string
        color:
          type: string
          nullable: true
        logoUrl:
          type: string
          nullable: true
        publicEmail:
          type: string
          nullable: true
    IncidentComponentStatuses:
      type: array
      description: >-
        The statuses of the components that are affected by the incident update.

        **Make sure the components are also included in the `components`
        field.**
      items:
        type: object
        properties:
          id:
            description: The id of the component that is affected by the incident update.
            type: string
          status:
            $ref: "#/components/schemas/ComponentStatus"
    MaintenanceComponentStatuses:
      type: array
      description: >-
        The statuses of the components that are affected by the maintenance
        update.

        **Make sure the components are also included in the `components`
        field.**
      items:
        type: object
        properties:
          id:
            description: >-
              The id of the component that is affected by the maintenance
              update.
            type: string
          status:
            $ref: "#/components/schemas/ComponentStatus"
    CreateIncidentRequest:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        components:
          type: array
          description: The ids of the components that are affected by the incident.
          items:
            type: string
        started:
          type: string
          format: date-time
          description: >-
            The date and time the incident started, If left empty the time will
            be set to the current time.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        shouldPublish:
          type: boolean
          description: Whether to publish the incident to the page.
          default: true
        statuses:
          $ref: "#/components/schemas/IncidentComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateIncidentRequest:
      type: object
      properties:
        name:
          type: string
        components:
          type: array
          description: The ids of the components that are affected by the incident.
          items:
            type: string
        started:
          type: string
          format: date-time
          description: The date and time the incident started.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        statuses:
          $ref: "#/components/schemas/IncidentComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    IncidentWithTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        nameTranslationId:
          type: string
          nullable: true
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        started:
          type: string
          format: date-time
          description: >-
            The date and time the incident started, If left empty the time will
            be set to the current time.
        resolved:
          type: string
          format: date-time
          description: |-
            The date and time the incident was resolved.
            null if the incident is not yet resolved.
          nullable: true
        duration:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        automated:
          type: boolean
        impact:
          $ref: "#/components/schemas/IncidentImpact"
        appId:
          type: string
          nullable: true
        updates:
          items:
            $ref: "#/components/schemas/IncidentUpdateDetailed"
        siteId:
          type: string
        importedFromStatuspage:
          type: boolean
    IncidentUpdateDetailed:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        messageHtml:
          type: string
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether the subscribers of the page and the affected components were
            notified.
        started:
          type: string
          format: date-time
          description: The date and time the incident update happened.
        incident:
          $ref: "#/components/schemas/IncidentBrief"
        translations:
          $ref: "#/components/schemas/Translations"
    IncidentBrief:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        started:
          type: string
          format: date-time
          description: The date and time the incident started.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentBrief"
    ComponentBrief:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/ComponentStatus"
        showUptime:
          type: boolean
          description: Whether to show the percentage and uptime bar for the component.
        site:
          $ref: "#/components/schemas/SiteBrief"
        subscribers:
          type: array
          items:
            type: object
    SiteBrief:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subdomain:
          type: string
        logoUrl:
          type: string
          nullable: true
        slackIntegrations:
          type: array
          items:
            type: object
        publicEmail:
          type: string
          nullable: true
        subscribers:
          type: array
          items:
            type: object
    CreateIncidentUpdateRequest:
      type: object
      properties:
        message:
          type: string
        components:
          type: array
          description: The ids of the components that are affected by the incident.
          items:
            type: string
        started:
          type: string
          format: date-time
          description: >-
            The date and time the incident update happened, If left empty the
            time will be set to the current time.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        statuses:
          $ref: "#/components/schemas/IncidentComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateIncidentUpdateRequest:
      type: object
      properties:
        message:
          type: string
        components:
          type: array
          description: The ids of the components that are affected by the incident.
          items:
            type: string
        started:
          type: string
          format: date-time
          description: The date and time the incident update happened.
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        statuses:
          $ref: "#/components/schemas/IncidentComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    IncidentUpdateWithTemplate:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        messageTranslationId:
          type: string
          nullable: true
        status:
          $ref: "#/components/schemas/IncidentStatus"
        notify:
          type: boolean
        started:
          type: string
          format: date-time
          description: >-
            The date and time the incident update happened, If left empty the
            time will be set to the current time.
        ended:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        incidentId:
          type: string
        messageHtml:
          type: string
        messageHtmlTranslationId:
          type: string
          nullable: true
        importedFromStatuspage:
          type: boolean
    Maintenance:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        start:
          type: string
          format: date-time
          description: The date and time the maintenance will start.
        duration:
          type: integer
          description: >-
            The duration of the maintenance in minutes from beginning to the
            resolution.

            null if the maintenance is not yet ended.
          nullable: true
        notifyStart:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components when the maintenance **starts**.
        notifyEnd:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components when the maintenance **ends**.
        notifyEarly:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components before the maintenance starts.
        notifyMinutes:
          type: integer
          description: >-
            The number of minutes before the maintenance starts that the
            subscribers will be notified.
        autoStart:
          type: boolean
          description: >-
            Whether to automatically start the maintenance automatically when
            the date and time reaches the `start` date and time.
        autoEnd:
          type: boolean
          description: >-
            Whether to automatically end the maintenance automatically when the
            date and time« reaches the `end` date and time.
        updates:
          type: array
          items:
            $ref: "#/components/schemas/MaintenanceUpdate"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentBrief"
        translations:
          $ref: "#/components/schemas/Translations"
    MaintenanceUpdate:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        messageHtml:
          type: string
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        started:
          type: string
          format: date-time
          description: The date and time the maintenance update happened.
        ended:
          type: string
          format: date-time
          nullable: true
        duration:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
    CreateMaintenanceRequest:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        components:
          type: array
          description: The ids of the components that are affected by the maintenance.
          items:
            type: string
        start:
          type: string
          format: date-time
          description: >-
            The date and time the maintenance will start in ISO-8601 format (UTC
            Timezone), If left empty the time will be set to the current time.
        end:
          type: string
          format: date-time
          description: >-
            The date and time the maintenance will end in ISO-8601 format (UTC
            Timezone), If left empty the time will be set to the current time.
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
          description: The status of the maintenance.
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        duration:
          type: integer
          description: >-
            How many minutes the maintenance will last since the `start` date
            and time if `autoEnd` is set to `true`.
        notifyStart:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components when the maintenance **starts**.
        notifyEnd:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components when the maintenance **ends**.
        notifyEarly:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components before the maintenance starts.
        notifyMinutes:
          type: integer
          description: >-
            The number of minutes before the maintenance starts that the
            subscribers will be notified.
        autoStart:
          type: boolean
          description: >-
            Whether to automatically start the maintenance automatically when
            the date and time reaches the `start` date and time.
        autoEnd:
          type: boolean
          description: >-
            Whether to automatically end the maintenance automatically when the
            date and time« reaches the `end` date and time.
        isCollapsed:
          type: boolean
          description: Whether the maintenance is collapsed or not on the page.
        expandAt:
          type: string
          format: date-time
          description: >-
            The date and time the maintenance will expand at in ISO-8601 format
            (UTC Timezone).
        statuses:
          $ref: "#/components/schemas/MaintenanceComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateMaintenanceRequest:
      type: object
      required:
        - message
        - components
        - start
        - end
        - status
        - notify
        - statuses
        - duration
        - autoStart
        - autoEnd
      properties:
        name:
          type: string
        message:
          type: string
          description: The message of the maintenance.
        components:
          type: array
          description: The ids of the components that are affected by the maintenance.
          items:
            type: string
        start:
          type: string
          format: date-time
          description: The date and time the maintenance will start.
        end:
          type: string
          format: date-time
          description: The date and time the maintenance will end.
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        autoStart:
          type: boolean
          description: >-
            Whether to automatically start the maintenance automatically when
            the date and time reaches the `start` date and time.
        autoEnd:
          type: boolean
          description: >-
            Whether to automatically end the maintenance automatically when the
            date and time« reaches the `end` date and time.
        duration:
          type: integer
          description: >-
            How many minutes the maintenance will last since the `start` date
            and time if `autoEnd` is set to `true`.
        statuses:
          $ref: "#/components/schemas/MaintenanceComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    MaintenanceUpdateDetailed:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        messageHtml:
          type: string
        notify:
          type: boolean
          description: >-
            Whether the subscribers of the page and the affected components were
            notified about the maintenance update.
        started:
          type: string
          format: date-time
          description: The date and time the maintenance update happened.
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        maintenance:
          $ref: "#/components/schemas/MaintenanceBrief"
        translations:
          $ref: "#/components/schemas/Translations"
    MaintenanceBrief:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        start:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        components:
          type: array
          items:
            $ref: "#/components/schemas/ComponentBrief"
    CreateMaintenanceUpdateRequest:
      type: object
      properties:
        message:
          type: string
        components:
          type: array
          description: >-
            The ids of the components that are affected by the maintenance
            update.
          items:
            type: string
        started:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components about the maintenance update.
        statuses:
          $ref: "#/components/schemas/MaintenanceComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateMaintenanceUpdateRequest:
      type: object
      properties:
        message:
          type: string
        components:
          type: array
          description: >-
            The ids of the components that are affected by the maintenance
            update.
          items:
            type: string
        started:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/MaintenanceStatus"
        notify:
          type: boolean
        statuses:
          $ref: "#/components/schemas/MaintenanceComponentStatuses"
        translations:
          $ref: "#/components/schemas/Translations"
    Template:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          description: Whether this template is used to create incidents or maintenances.
          enum:
            - INCIDENT
            - MAINTENANCE
        name:
          description: The name of the notice it creates.
          type: string
        nameTranslationId:
          type: string
          nullable: true
        message:
          description: The message for the first update of the notice it creates.
          type: string
        messageTranslationId:
          type: string
          nullable: true
        messageHtml:
          type: string
        messageHtmlTranslationId:
          type: string
          nullable: true
        status:
          $ref: "#/components/schemas/TemplateStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        createdAt:
          type: string
          format: date-time
        siteId:
          type: string
        importedFromStatuspage:
          type: boolean
        deletedAt:
          type: string
          format: date-time
          nullable: true
        origin:
          $ref: "#/components/schemas/TemplateOrigin"
        components:
          type: array
          items:
            $ref: "#/components/schemas/TemplateComponent"
        translations:
          $ref: "#/components/schemas/Translations"
    TemplateComponent:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          $ref: "#/components/schemas/ComponentStatus"
        componentId:
          type: string
        templateId:
          type: string
        importedFromStatuspage:
          type: boolean
    CreateTemplateRequest:
      type: object
      properties:
        subdomain:
          type: string
        type:
          type: string
          description: Whether this template is used to create incidents or maintenances.
          enum:
            - INCIDENT
            - MAINTENANCE
        name:
          description: The name of the notice it creates.
          type: string
        message:
          description: The message for the first update of the notice it creates.
          type: string
        status:
          $ref: "#/components/schemas/TemplateStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components when a notice is created using this template.
        components:
          type: array
          description: >-
            The list of components that are affected by the incident or
            maintenance.
          items:
            type: object
            properties:
              id:
                description: >-
                  The id of the component that is affected by the incident or
                  maintenance.
                type: string
              status:
                $ref: "#/components/schemas/ComponentStatus"
                description: >-
                  The status of the component that is affected by the incident
                  or maintenance.
        translations:
          $ref: "#/components/schemas/Translations"
    UpdateTemplateRequest:
      type: object
      properties:
        type:
          type: string
          description: Whether this template is used to create incidents or maintenances.
          enum:
            - INCIDENT
            - MAINTENANCE
        name:
          description: The name of the notice it creates.
          type: string
        message:
          description: The message for the first update of the notice it creates.
          type: string
        status:
          $ref: "#/components/schemas/TemplateStatus"
        notify:
          type: boolean
          description: >-
            Whether to notify the subscribers of the page and the affected
            components.
        components:
          type: array
          description: >-
            The list of components that are affected by the incident or
            maintenance.
          items:
            type: object
            properties:
              id:
                description: >-
                  The id of the component that is affected by the incident or
                  maintenance.
                type: string
              status:
                $ref: "#/components/schemas/ComponentStatus"
                description: >-
                  The status of the component that is affected by the incident
                  or maintenance.
        translations:
          $ref: "#/components/schemas/Translations"
    DeletedTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        message:
          type: string
        createdAt:
          type: string
          format: date-time
        site:
          type: object
          properties:
            id:
              type: string
    Teammate:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: >-
            The name of the user, Will be null if the user did not set their
            name.
          nullable: true
        email:
          type: string
          description: The email of the user.
        avatar:
          type: string
          nullable: true
          description: >-
            The avatar of the user, Will be null if the user did not set their
            avatar. Default avatars are not included in the response.
    AddTeammateRequest:
      type: object
      properties:
        email:
          type: string
          description: The email of the teammate you wish to add.
        permission:
          $ref: "#/components/schemas/TeammatePermission"
        audienceGroups:
          type: array
          description: The ids of the audience groups you wish to add the teammate to.
          items:
            type: string
          nullable: true
        team:
          type: string
          description: The id of the team you want to include the teammate in.
          nullable: true
    TeammateDetail:
      type: object
      properties:
        email:
          type: string
    TeammatePermission:
      type: string
      enum:
        - FULL
        - READ
        - WRITE
        - MEMBER
        - EDITOR
      description: The permissions of the teammate.
    Subscriber:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          description: The email of the subscriber.
          nullable: true
        phone:
          type: string
          description: The phone number of the subscriber.
          nullable: true
        webhook:
          type: string
          description: The webhook URL of the subscriber.
          nullable: true
        webhookEmail:
          type: string
          description: >-
            The webhook email of the webhook subscriber. This is used to send
            email to the subscriber when a webhook does not receive a positive
            response.
          nullable: true
        confirmed:
          type: boolean
          description: Whether the subscriber is confirmed or not.
        all:
          description: >-
            Whether the subscriber is subscribed to all components on the page
            or not.
          type: boolean
        components:
          type: array
          description: The ids of the components that the subscriber is subscribed to.
          items:
            type: string
    AddSubscriberRequest:
      type: object
      properties:
        email:
          type: string
          description: The email of the subscriber.
        phone:
          type: string
          description: The phone number of the subscriber.
        webhook:
          type: string
          description: The webhook URL of the subscriber.
        webhookEmail:
          type: string
          description: >-
            The webhook email of the webhook subscriber. This is used to send
            email to the subscriber when a webhook request does not receive a
            positive response.
        all:
          type: boolean
          description: >-
            Whether the subscriber is subscribed to all components on the page
            or not.
        autoConfirm:
          type: boolean
          description: >-
            Whether the subscriber is automatically confirmed or will receive an
            email to confirm their subscription.
        components:
          type: array
          description: >-
            The ids of the components that the subscriber will be subscribed to,
            Leave as null if `all` is set to true.
          nullable: true
          items:
            type: string
        language:
          type: string
          description: >-
            The language of the subscriber in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
    SubscriberDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the subscriber.
          nullable: true
        email:
          type: string
          description: The email of the subscriber.
          nullable: true
        phone:
          type: string
          nullable: true
        confirmed:
          type: boolean
          description: >-
            Whether the subscriber is confirmed or not, Used to check if the
            user has confirmed their email address.
        all:
          type: boolean
          description: >-
            Whether the subscriber is subscribed to all components on the page
            or not.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        siteId:
          type: string
        unsubscribeToken:
          type: string
        webhook:
          type: string
          nullable: true
        webhookEmail:
          type: string
          nullable: true
        discord:
          type: string
          nullable: true
        discordTeam:
          type: string
          nullable: true
        slack:
          type: string
          nullable: true
        slackTeam:
          type: string
          nullable: true
        language:
          type: string
          description: >-
            The language of the subscriber in language code (e.g. `en` for
            English, `fr` for French, `de` for German, etc.).
        company:
          type: string
          nullable: true
        microsoftTeamsWebhook:
          type: string
          nullable: true
        googleChatWebhook:
          type: string
          nullable: true
        googleChatSpace:
          type: string
          nullable: true
        failedAttempts:
          type: integer
        approved:
          description: Whether the subscriber is approved or not by Instatus.
          type: boolean
        importedFromStatuspage:
          type: boolean
        hideUnsubLink:
          type: boolean
        webhookIncidentBody:
          type: string
          nullable: true
        webhookMaintenanceBody:
          type: string
          nullable: true
        webhookComponentBody:
          type: string
          nullable: true
        webhookHttpMethod:
          $ref: "#/components/schemas/httpMethod"
        webhookHeaders:
          type: object
          nullable: true
        webhookQueryParams:
          type: object
          nullable: true
        site:
          type: object
          properties:
            id:
              type: string
    RemovedSubscriber:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        email:
          type: string
        phone:
          type: string
          nullable: true
        webhook:
          type: string
          nullable: true
        webhookEmail:
          type: string
          nullable: true
        discord:
          type: string
          nullable: true
        microsoftTeamsWebhook:
          type: string
          nullable: true
        company:
          type: string
          nullable: true
        site:
          type: object
          properties:
            id:
              type: string
    Metric:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the metric.
        active:
          type: boolean
          description: >-
            Whether the metric is shown under the status page's system metrics
            section.
        order:
          type: integer
          description: The order of the metric on the status page.
        suffix:
          type: string
          description: >-
            The suffix of the metric. This is used to display the metric value
            in the format of `value suffix` e.g. `100ms` where `ms` is the
            suffix.
        data:
          type: array
          items:
            $ref: "#/components/schemas/Datapoint"
    Datapoint:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: integer
          format: int64
          description: The timestamp of the datapoint in milliseconds.
        value:
          type: number
          description: The value of the datapoint, during the time of the `timestamp`.
    AddMetricRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the metric.
        suffix:
          type: string
          description: >-
            The suffix of the metric. This is used to display the metric value
            in the format of `value suffix` e.g. `100ms` where `ms` is the
            suffix.
    UpdateMetricRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the metric.
        suffix:
          type: string
          description: >-
            The suffix of the metric. This is used to display the metric value
            in the format of `value suffix` e.g. `100ms` where `ms` is the
            suffix.
    AddDatapointRequest:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
          description: The timestamp of the datapoint in milliseconds.
        value:
          type: number
          description: The value of the datapoint, during the time of the `timestamp`.
    AddMultipleDatapointsRequest:
      type: object
      properties:
        data:
          type: array
          description: >-
            The list of datapoints to add to the metric, Make sure the
            timestamps are at least 30 seconds apart.
          items:
            $ref: "#/components/schemas/AddDatapointRequest"
    DeletedMetric:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    DeletedDatapoints:
      type: object
      properties:
        name:
          type: string
        order:
          type: integer
          nullable: true
        suffix:
          type: string
        site:
          type: object
          properties:
            id:
              type: string
            subdomain:
              type: string
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        slug:
          type: string
        avatar:
          type: string
          format: uri
    PublicStatusSummary:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/PublicPageInfo"
        activeIncidents:
          type: array
          items:
            $ref: "#/components/schemas/PublicIncident"
        activeMaintenances:
          type: array
          items:
            $ref: "#/components/schemas/PublicMaintenance"
    PublicPageInfo:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        status:
          type: string
          enum:
            - UP
            - HASISSUES
            - UNDERMAINTENANCE
    PublicIncident:
      type: object
      properties:
        name:
          type: string
        started:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/IncidentStatus"
        impact:
          $ref: "#/components/schemas/IncidentImpact"
        url:
          type: string
          format: uri
    PublicMaintenance:
      type: object
      properties:
        name:
          type: string
        start:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - NOTSTARTEDYET
            - INPROGRESS
            - COMPLETED
        duration:
          type: string
        url:
          type: string
          format: uri
    AudienceGroup:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        name:
          type: string
        teammates:
          type: array
          items:
            $ref: "#/components/schemas/AudienceGroupTeammate"
        components:
          type: array
          items:
            $ref: "#/components/schemas/AudienceGroupComponent"
    AudienceGroupTeammate:
      type: object
      properties:
        id:
          type: string
        audienceGroupId:
          type: string
        teammateId:
          type: string
        teammate:
          $ref: "#/components/schemas/Teammate"
    AudienceGroupComponent:
      type: object
      properties:
        id:
          type: string
        audienceGroupId:
          type: string
        componentId:
          type: string
        component:
          $ref: "#/components/schemas/Component"
    CreateAudienceGroupRequest:
      type: object
      properties:
        name:
          type: string
        components:
          type: array
          items:
            type: string
        teammates:
          type: array
          items:
            type: string
    CreatedAudienceGroup:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        name:
          type: string
        site:
          type: object
          properties:
            id:
              type: string
    UpdateAudienceGroupRequest:
      type: object
      properties:
        components:
          type: array
          items:
            type: string
    UpdatedAudienceGroup:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        name:
          type: string
        site:
          type: object
          properties:
            id:
              type: string
    DeletedAudienceGroup:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        name:
          type: string
        site:
          type: object
          properties:
            id:
              type: string
    SecurePageLink:
      type: object
      properties:
        id:
          type: string
        secureLink:
          type: string
          format: uri
    Monitor:
      type: object
      properties:
        pageId:
          type: string
          description: The id of the status page of the monitor.
        url:
          type: string
        httpMethod:
          $ref: "#/components/schemas/httpMethod"
        body:
          type: string
          nullable: true
        headers:
          type: object
          additionalProperties:
            type: string
        queryParams:
          type: object
          additionalProperties:
            type: string
        basicAuth:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
        type:
          $ref: "#/components/schemas/MonitorType"
        assertions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              comparison:
                $ref: "#/components/schemas/ComparisonType"
              selector:
                type: string
                nullable: true
              value:
                type: string
        alerts:
          type: array
          description: The ids of the alerts to send when the monitor triggers an alert.
          items:
            type: string
        name:
          type: string
        locations:
          $ref: "#/components/schemas/MonitorLocation"
        checksInterval:
          type: integer
          description: The interval in seconds between each monitor check.
        onFail:
          type: object
          properties:
            createIncident:
              type: boolean
            createOutageDuration:
              type: boolean
            publishIncident:
              type: boolean
            notifySubscribers:
              type: boolean
        onRecover:
          type: object
          properties:
            resolveIncident:
              type: boolean
            resolveOutageDuration:
              type: boolean
            publishIncident:
              type: boolean
            notifySubscribers:
              type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    httpMethod:
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        - OPTIONS
        - HEAD
    MonitorType:
      type: string
      enum:
        - HTTP
        - PING
        - TCP
        - DNS
        - HTTP_API
    MonitorLocation:
      type: string
      enum:
        - US_EAST_1
        - EU_CENTRAL_1
        - AP_NORTHEAST_1
    CreateMonitorRequest:
      type: object
      required:
        - pageId
        - url
        - httpMethod
      properties:
        pageId:
          type: string
          description: The id of the status page of the monitor to create the monitor on.
        url:
          type: string
        httpMethod:
          $ref: "#/components/schemas/httpMethod"
        body:
          type: string
          nullable: true
        headers:
          type: object
          additionalProperties:
            type: string
        queryParams:
          type: object
          additionalProperties:
            type: string
        basicAuth:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
        type:
          $ref: "#/components/schemas/MonitorType"
        assertions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
                enum:
                  - AVAILABLE
                  - BODY
                  - PING
                  - TCP
                  - DNS
                  - STATUSCODE
                  - JSONBODY
                  - HEADERS
                  - RESPONSETIME
              comparison:
                $ref: "#/components/schemas/ComparisonType"
              selector:
                type: string
                nullable: true
              value:
                type: string
        alerts:
          type: array
          description: The ids of the alerts to send when the monitor triggers an alert.
          items:
            type: string
        name:
          type: string
        locations:
          $ref: "#/components/schemas/MonitorLocation"
        checksInterval:
          type: integer
          description: The interval in seconds between each monitor check.
        createComponent:
          type: boolean
          description: >-
            Whether to create a component that will follow the status of the
            monitor on the status page.
        createMetric:
          type: boolean
          description: >-
            Whether to create a metric that will show the response time of the
            monitor on the status page.
        onFail:
          type: object
          properties:
            createIncident:
              type: boolean
            createOutageDuration:
              type: boolean
            publishIncident:
              type: boolean
            notifySubscribers:
              type: boolean
        onRecover:
          type: object
          properties:
            resolveIncident:
              type: boolean
            resolveOutageDuration:
              type: boolean
            publishIncident:
              type: boolean
            notifySubscribers:
              type: boolean
    UpdateMonitorRequest:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
    MonitorResponse:
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/Monitor"
        message:
          type: string
    MonitorLog:
      type: object
      properties:
        id:
          type: string
        monitorId:
          type: string
        location:
          type: string
          $ref: "#/components/schemas/Monitor"
        createdAt:
          type: string
          format: date-time
        isSuccessful:
          type: boolean
        isSSLCheck:
          type: boolean
        httpStatusCode:
          type: string
        status:
          type: string
          enum:
            - UP
            - DOWN
            - UNKNOWN
            - DEGRADED
        dnsTime:
          type: number
          format: float
        tcpTime:
          type: number
          format: float
        tlsTime:
          type: number
          format: float
        firstByteTime:
          type: number
          format: float
        downloadTime:
          type: number
          format: float
        responseTime:
          type: number
          format: float
        performanceTime:
          type: number
          format: float
        accessibilityScore:
          type: number
          format: float
        seoScore:
          type: number
          format: float
        bestPracticesScore:
          type: number
          format: float
        successfulAssertions:
          type: integer
        url:
          type: string
          format: uri
        method:
          $ref: "#/components/schemas/httpMethod"
        requestHeaders:
          type: object
          additionalProperties:
            type: string
        requestBody:
          type: string
        responseHeaders:
          type: object
          additionalProperties:
            type: string
        responseBody:
          type: string
        error:
          type: string
        assertions:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              comparison:
                $ref: "#/components/schemas/ComparisonType"
              value:
                type: string
              actual:
                type: string
              success:
                type: boolean
        sslDetails:
          type: object
          properties:
            issuer:
              type: string
            subject:
              type: string
            validFrom:
              type: string
              format: date-time
            validTo:
              type: string
              format: date-time
            daysUntilExpiration:
              type: integer
    CreateMonitorAlertRequest:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/MonitorAlertType"
        pageId:
          type: string
          description: >-
            The id of the status page of the monitor to create the monitor alert
            on.
        recipient:
          $ref: "#/components/schemas/MonitorAlertRecipient"
        recipientWorkspace:
          type: string
        whenFails:
          type: boolean
          description: Whether to send an alert when the monitor fails.
        whenRecovers:
          type: boolean
          description: >-
            Whether to send an alert when the monitor recovers from a failure or
            degraded state.
        whenDegrades:
          type: boolean
          description: Whether to send an alert when the monitor degrades.
        whenSslExpires:
          type: boolean
          description: Whether to send an alert when the SSL certificate expires.
        sslExpiresInDays:
          type: integer
          description: >-
            The number of days left until the SSL certificate expires so the
            alert will trigger, for example if this value is 30 then the alert
            will trigger 30 days before the certificate expires.
        monitors:
          type: array
          description: The ids of the monitors this alert will trigger based on.
          items:
            type: string
        metadata:
          type: string
    UpdateMonitorAlertRequest:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/MonitorAlertType"
        monitors:
          type: array
          description: The ids of the monitors this alert will trigger based on.
          items:
            type: string
    MonitorAlertResponse:
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/MonitorAlert"
        message:
          type: string
    MonitorAlert:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        type:
          $ref: "#/components/schemas/MonitorAlertType"
        recipient:
          $ref: "#/components/schemas/MonitorAlertRecipient"
        whenFails:
          type: boolean
          description: Whether to send an alert when the monitor fails.
        whenRecovers:
          type: boolean
          description: >-
            Whether to send an alert when the monitor recovers from a failure or
            degraded state.
        whenDegrades:
          type: boolean
          description: Whether to send an alert when the monitor degrades.
        whenSslExpires:
          type: boolean
          description: Whether to send an alert when the SSL certificate expires.
        sslExpiresInDays:
          type: integer
          description: >-
            The number of days left until the SSL certificate expires so the
            alert will trigger, for example if this value is 30 then the alert
            will trigger 30 days before the certificate expires.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metadata:
          type: string
    MonitorAlertType:
      type: string
      enum:
        - EMAIL
        - SMS
        - SLACK
        - DISCORD
        - MICROSOFT_TEAMS
        - PHONE_CALL
        - WEBHOOK
      description: >-
        The type of message that will be sent when the monitor triggers an
        alert.

        * `EMAIL` - Email Alert

        * `SMS` - SMS Alert

        * `SLACK` - Slack Alert

        * `DISCORD` - Discord Alert

        * `MICROSOFT_TEAMS` - Microsoft Teams Alert

        * `PHONE_CALL` - Phone Call Alert

        * `WEBHOOK` - Webhook Alert
    MonitorAlertRecipient:
      type: string
      description: >-
        The recipient of this alert, This depends on the type of alert. **For
        example:**

        * `EMAIL` - Email address

        * `SMS` and `PHONE_CALL` - Phone number

        * `SLACK`, `DISCORD`, and `WEBHOOK` - Webhook URL
         * `MICROSOFT_TEAMS` - Email address or webhook URL
    CreateMonitorGroupRequest:
      type: object
      properties:
        pageId:
          type: string
          description: >-
            The id of the status page of the monitor group to create the monitor
            group on.
        name:
          type: string
        childId:
          type: string
    UpdateMonitorGroupRequest:
      type: object
      properties:
        name:
          type: string
    MonitorGroupResponse:
      type: object
      properties:
        monitor:
          $ref: "#/components/schemas/MonitorGroup"
        message:
          type: string
    MonitorGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        siteId:
          type: string
        collapsed:
          type: boolean
        monitors:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
        groupId:
          type: string
        children:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        order:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        parents:
          type: array
          items:
            type: string
        componentId:
          type: string
    RoutingRulesResponse:
      type: object
      properties:
        routingRules:
          type: array
          description: The routing rules for the page.
          items:
            $ref: "#/components/schemas/RoutingRule"
    RoutingRule:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        assertions:
          type: array
          description: >-
            The assertions that if true will trigger the `actions` of the
            routing rule.
          items:
            $ref: "#/components/schemas/Assertion"
        actions:
          type: array
          description: >-
            The actions that will be triggered when the `assertions` of the
            routing rule are true.
          items:
            $ref: "#/components/schemas/Action"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        order:
          description: >-
            The order of the routing rule in the list of routing rules the
            higher the number the later the routing rule will be triggered.
          type: integer
    Assertion:
      type: object
      properties:
        id:
          type: string
        routingRuleId:
          type: string
        type:
          $ref: "#/components/schemas/AssertionType"
        comparison:
          $ref: "#/components/schemas/ComparisonType"
        value:
          description: >-
            The value to compare the assertion to depending on the `type` of the
            assertion.

            * `IMPACT` - should be an impact level (e.g. `OPERATIONAL`,
            `UNDERMAINTENANCE`, `DEGRADEDPERFORMANCE`, `PARTIALOUTAGE`,
            `MAJOROUTAGE`)

            * `TITLE` - The title of the incident

            * `DESCRIPTION` - The description of the incident

            * `AFFECTED_COMPONENTS` - The affected component of the incident

            * `INCIDENT` - The incident itself, whether it be through workspace
            member or an external integration (e.g. Datadog), You can also use
            multiple values by separating them with a comma.

            **Available Options**: `WORKSPACEMEMBER`, `WEBHOOK`, `BETTERUPTIME`,
            `CHECKLY`, `DATADOG`, `DYNATRACE`, `FRESHPING`, `GRAFANA`,
            `HETRIXTOOLS`, `NEWRELIC`, `PAGERDUTY`, `PINGDOM`, `RUNSCOPE`,
            `SITE24X7`, `STATUSCAKE`, `UPTIMEROBOT`, `EMAIL`, `PROMETHEUS`,
            `UPDOWN`, `GOOGLECLOUDMONITORING`
          type: string
    Action:
      type: object
      properties:
        id:
          type: string
        routingRuleId:
          type: string
        type:
          $ref: "#/components/schemas/ActionType"
        targetId:
          type: string
          description: >-
            The id of the target to notify. Keep in mind in actions targetId can
            be a workspace member email or a team id depending on the `type` of
            the action.
    CreateRoutingRuleRequest:
      type: object
      properties:
        routingRule:
          type: object
          properties:
            assertions:
              type: array
              description: >-
                The assertions that if true will trigger the `actions` of the
                routing rule.
              items:
                $ref: "#/components/schemas/Assertion"
            actions:
              type: array
              description: >-
                The actions that will be triggered when the `assertions` of the
                routing rule are true.
              items:
                $ref: "#/components/schemas/Action"
            order:
              type: integer
              description: >-
                The order of the routing rule in the list of routing rules the
                higher the number the later the routing rule will be triggered.
            siteId:
              type: string
              description: The id of the site the routing rule belongs to.
    UpdateRoutingRuleRequest:
      type: object
      properties:
        routingRule:
          type: object
          properties:
            id:
              type: string
            assertions:
              type: array
              items:
                $ref: "#/components/schemas/Assertion"
            order:
              type: integer
            siteId:
              type: string
    RoutingRuleResponse:
      type: object
      properties:
        routingRule:
          $ref: "#/components/schemas/RoutingRule"
        message:
          type: string
    DeleteRoutingRuleResponse:
      type: object
      properties:
        message:
          type: string
    ActionType:
      type: string
      enum:
        - NOTIFY_TEAM
        - NOTIFY_WORKSPACE_MEMBER
        - NOTIFY_CURRENT_ON_CALL_USER
        - NOTIFY_NEXT_ON_CALL_USER
        - NOTIFY_ALL_ON_CALL_MEMBERS
    AssertionType:
      type: string
      description: >-
        The type of assertion to use.

        * `IMPACT` - The impact of the incident

        * `TITLE` - The title of the incident

        * `DESCRIPTION` - The description of the incident

        * `AFFECTED_COMPONENTS` - The affected component of the incident

        * `INCIDENT` - Who/What generated the incident, whether it be through
        workspace member or an external integration (e.g. Datadog)
      enum:
        - IMPACT
        - TITLE
        - DESCRIPTION
        - AFFECTED_COMPONENTS
        - INCIDENT
    ComparisonType:
      type: string
      enum:
        - EQUALS
        - NOT_EQUALS
        - IS_EMPTY
        - NOT_EMPTY
        - GREATER_THAN
        - GREATER_THAN_OR_EQUALS
        - LESS_THAN
        - LESS_THAN_OR_EQUALS
        - CONTAINS
        - NOT_CONTAINS
        - HAS_KEY
        - NOT_HAS_KEY
        - HAS_VALUE
        - NOT_HAS_VALUE
        - IS_NULL
        - NOT_NULL
        - STARTS_WITH
        - ENDS_WITH
    EscalationPoliciesResponse:
      type: object
      properties:
        escalationPolicies:
          type: array
          items:
            $ref: "#/components/schemas/EscalationPolicy"
    EscalationPolicy:
      type: object
      properties:
        id:
          type: string
        siteId:
          type: string
        name:
          type: string
          description: The name of the escalation policy.
        description:
          description: The description of the escalation policy.
          type: string
        rules:
          type: array
          items:
            $ref: "#/components/schemas/EscalationRule"
        repeat:
          type: boolean
          description: >-
            Whether the escalation policy should repeat or not after the last
            rule is triggered.
        repeatCount:
          type: integer
          description: The number of times the escalation policy should repeat.
        repeatDelay:
          type: integer
          description: The delay in minutes between each repeat.
        revertAcknowledgement:
          type: boolean
          description: >-
            Whether the escalation policy should revert the acknowledgement
            status of the incident after each repeat.
        autoResolveIncidentsAfterRepeat:
          type: boolean
          description: >-
            Whether the escalation policy should auto resolve the incident after
            all the repeats are completed.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EscalationRule:
      type: object
      properties:
        id:
          type: string
        escalationPolicyId:
          type: string
          description: The id of the escalation policy the escalation rule belongs to.
        condition:
          $ref: "#/components/schemas/EscalationRuleCondition"
        delayInMins:
          type: integer
          description: The delay in minutes before the escalation rule is triggered.
        actions:
          type: array
          description: The actions to take when the escalation rule is triggered.
          items:
            $ref: "#/components/schemas/EscalationAction"
    EscalationAction:
      type: object
      properties:
        id:
          type: string
        ruleId:
          type: string
        type:
          $ref: "#/components/schemas/EscalationActionType"
        targetId:
          type: string
          nullable: true
          description: >-
            The id of the target to notify. Keep in mind in actions targetId can
            be a workspace member id, a team id, or an on call schedule id
            depending on the `type` of the action.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateEscalationPolicyRequest:
      type: object
      properties:
        pageId:
          type: string
          description: >-
            The id of the status page of the escalation policy to create the
            escalation policy on.
        name:
          type: string
          description: The name of the escalation policy.
        description:
          type: string
          description: The description of the escalation policy.
        rules:
          type: array
          items:
            $ref: "#/components/schemas/CreateEscalationRule"
        repeat:
          type: boolean
          description: >-
            Whether the escalation policy should repeat or not after the last
            rule is triggered.
        repeatCount:
          type: integer
          description: The number of times the escalation policy should repeat.
        repeatDelay:
          type: integer
          description: The delay in minutes between each repeat.
        revertAcknowledgement:
          type: boolean
          description: >-
            Whether the escalation policy should revert the acknowledgement
            status of the incident after each repeat.
        autoResolveIncidentsAfterRepeat:
          type: boolean
          description: >-
            Whether the escalation policy should auto resolve the incident after
            all the repeats are completed.
    CreateEscalationRule:
      type: object
      properties:
        delayInMins:
          type: integer
          description: The delay in minutes before the escalation rule is triggered.
        condition:
          $ref: "#/components/schemas/EscalationRuleCondition"
        actions:
          type: array
          description: The actions to take when the escalation rule is triggered.
          items:
            $ref: "#/components/schemas/CreateEscalationAction"
    CreateEscalationAction:
      type: object
      properties:
        targetId:
          type: string
          description: >-
            The id of the target to notify. Keep in mind in actions targetId can
            be a workspace member id, a team id, or an on call schedule id
            depending on the type of the `action`.
        type:
          $ref: "#/components/schemas/EscalationActionType"
    UpdateEscalationPolicyRequest:
      $ref: "#/components/schemas/CreateEscalationPolicyRequest"
    EscalationPolicyResponse:
      type: object
      properties:
        escalationPolicy:
          $ref: "#/components/schemas/EscalationPolicy"
        message:
          type: string
    DeleteEscalationPolicyResponse:
      type: object
      properties:
        message:
          type: string
    EscalationRuleCondition:
      type: string
      enum:
        - NOT_ACKNOWLEDGED
    EscalationActionType:
      type: string
      description: >-
        The type of escalation action to take.


        - `NOTIFY_TEAM`: Notify a team via an id.

        - `NOTIFY_WORKSPACE_MEMBER`: Notify the workspace member via an id.

        - `NOTIFY_CURRENT_ON_CALL_USER`: Notify the current on call user of a
        schedule.

        - `NOTIFY_NEXT_ON_CALL_USER`: Notify the next on call user of a
        schedule.

        - `NOTIFY_ALL_ON_CALL_MEMBERS`: Notify all on call members of a
        schedule.
      enum:
        - NOTIFY_TEAM
        - NOTIFY_WORKSPACE_MEMBER
        - NOTIFY_CURRENT_ON_CALL_USER
        - NOTIFY_NEXT_ON_CALL_USER
        - NOTIFY_ALL_ON_CALL_MEMBERS
    CreateOnCallScheduleRequest:
      type: object
      required:
        - name
        - pageId
        - onCallShifts
      properties:
        name:
          description: The name of the on call schedule.
          type: string
        description:
          type: string
          description: The description of the on call schedule.
        pageId:
          type: string
          description: The id of the page the on call schedule is created on.
        onCallShifts:
          type: array
          items:
            $ref: "#/components/schemas/OnCallShiftRequest"
    UpdateOnCallScheduleRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/ScheduleStatus"
        onCallShifts:
          type: array
          items:
            $ref: "#/components/schemas/OnCallShift"
    OnCallScheduleResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          $ref: "#/components/schemas/ScheduleStatus"
        onCallShifts:
          type: array
          items:
            $ref: "#/components/schemas/OnCallShift"
    OnCallShift:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        order:
          type: integer
        members:
          type: array
          items:
            $ref: "#/components/schemas/ShiftMember"
        rotationType:
          $ref: "#/components/schemas/RotationType"
        customRotationTypeValue:
          type: integer
          nullable: true
          description: >-
            The value of the custom rotation type. This is used to determine the
            number of hours, days, or weeks between rotations.
        customRotationTypeUnit:
          $ref: "#/components/schemas/CustomRotationTypeUnit"
          nullable: true
          description: >-
            The unit of time to use for the custom rotation type. This is used
            to determine the number of hours, days, or weeks between rotations.
        startDate:
          type: string
          format: date-time
          description: The beginning date (UTC Format) of the on call shift.
        endDate:
          type: string
          format: date-time
          description: >-
            The end date of the on call shift. If not provided, the on call
            shift will be active indefinitely.
        restrictionType:
          $ref: "#/components/schemas/RestrictionType"
        timeOfDayRestrictionStartTime:
          type: string
          format: time
          nullable: true
        timeOfDayRestrictionEndTime:
          type: string
          format: time
          nullable: true
        timeIntervals:
          type: array
          description: >-
            The list of time intervals to use for the on call shift when the
            `restrictionType` is `TIMEINTERVALS`. This is used to restrict the
            on call shift to certain time intervals.
          items:
            $ref: "#/components/schemas/TimeInterval"
    OnCallShiftRequest:
      type: object
      required:
        - name
        - members
        - rotationType
        - startDate
      properties:
        name:
          type: string
          description: The name of the on call shift.
        members:
          type: array
          description: >-
            The list of teammates to add to the on call shift. Should have at
            least 1 workspace member.
          items:
            $ref: "#/components/schemas/ShiftMemberRequest"
        rotationType:
          $ref: "#/components/schemas/RotationType"
        customRotationTypeValue:
          type: integer
          nullable: true
          description: >-
            The value of the custom rotation type. This is used to determine the
            number of hours, days, or weeks between rotations.
        customRotationTypeUnit:
          $ref: "#/components/schemas/CustomRotationTypeUnit"
          nullable: true
        startDate:
          type: string
          format: date-time
          description: The beginning date (UTC Format) of the on call shift.
        endDate:
          type: string
          format: date-time
          description: >-
            The end date (UTC Format) of the on call shift. If not provided, the
            on call shift will be active indefinitely.
        restrictionType:
          $ref: "#/components/schemas/RestrictionType"
        timeOfDayRestrictionStartTime:
          type: string
          format: time
          description: >-
            The start time of the time of day restriction. This is used to
            restrict the on call shift to certain time of day when the
            `restrictionType` is `TIMEOFDAY` (e.g `1970-01-01T21:00:00.000Z` for
            9 PM UTC).
          nullable: true
        timeOfDayRestrictionEndTime:
          type: string
          format: time
          description: >-
            The end time of the time of day restriction. This is used to
            restrict the on call shift to certain time of day when the
            `restrictionType` is `TIMEOFDAY` (e.g `1970-01-01T03:00:00.000Z` for
            3 AM UTC).
          nullable: true
        timeIntervals:
          type: array
          description: >-
            The list of time intervals to use for the on call shift when the
            `restrictionType` is `TIMEINTERVALS`. This is used to restrict the
            on call shift to certain time intervals.
          items:
            $ref: "#/components/schemas/TimeInterval"
    ShiftMember:
      type: object
      properties:
        id:
          type: string
        order:
          type: integer
        color:
          type: string
        workspaceMember:
          $ref: "#/components/schemas/WorkspaceMember"
    ShiftMemberRequest:
      type: object
      required:
        - workspaceMemberId
        - color
      properties:
        workspaceMemberId:
          type: string
          description: The id of the workspace member to add to the on call shift.
        color:
          type: string
          description: >-
            The color of the teammate in the on call shift. This is used to
            display the teammate in the on call shift schedule in on the
            [dashboard](https://dashboard.instatus.com).
    WorkspaceMember:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
    TimeInterval:
      type: object
      properties:
        id:
          type: string
        startDay:
          $ref: "#/components/schemas/DayOfWeek"
          description: The day of the week to start the time interval.
        startDayTime:
          type: string
          format: time
          description: >-
            The time to start the time interval. (e.g `1970-01-01T21:00:00.000Z`
            for 9 PM UTC)
        endDay:
          $ref: "#/components/schemas/DayOfWeek"
          description: The day of the week to end the time interval.
        endDayTime:
          type: string
          format: time
          description: >-
            The time to start the time interval. (e.g `1970-01-01T03:00:00.000Z`
            for 3 AM UTC)
    RestrictionType:
      type: string
      description: >-
        The type of restriction to use for the on call shift.


        - `NONE`: The on call shift will not have any time restrictions.

        - `TIMEOFDAY`: The on call shift will have a time of day restriction
        _(e.g. 9:00 AM to 5:00 PM)_.

        - `TIMEINTERVALS`: The on call shift will have time intervals
        restrictions _(e.g. Wednesday 9:00 AM to Friday 9:00 AM - 5:00 PM)_.
      enum:
        - NONE
        - TIMEOFDAY
        - TIMEINTERVALS
    RotationType:
      type: string
      description: >-
        The type of rotation to use for the on call shift.


        - `DAILY`: The on call shift will rotate daily.

        - `WEEKLY`: The on call shift will rotate weekly.

        - `CUSTOM`: The on call shift will rotate based on the
        `customRotationTypeValue` and `customRotationTypeUnit`.
      enum:
        - DAILY
        - WEEKLY
        - CUSTOM
    CustomRotationTypeUnit:
      type: string
      description: >-
        The unit of time to use for the custom rotation type.


        - `HOURS`: The on call shift will rotate every `customRotationTypeValue`
        hours.

        - `DAYS`: The on call shift will rotate every `customRotationTypeValue`
        days.

        - `WEEKS`: The on call shift will rotate every `customRotationTypeValue`
        weeks.
      enum:
        - HOURS
        - DAYS
        - WEEKS
    DayOfWeek:
      type: string
      enum:
        - SATURDAY
        - SUNDAY
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
    ScheduleStatus:
      type: string
      enum:
        - ACTIVE
        - PAUSED
      description: |-
        The status of the on call schedule.

        - `ACTIVE`: The on call schedule is active.
        - `PAUSED`: The on call schedule is paused.
